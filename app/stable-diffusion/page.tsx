"use client";

import { useState, useEffect } from "react";
import { useChat } from "ai/react";

export default function StableDiffusion() {
  const [ message, setMessage ] = useState<string | null>(null);
  const [ summary, setSummary ] = useState<string | null>(null);
  const [ image, setImage ] = useState<string | null>(null);
  const [ imageIsLoading, setImageIsLoading ] = useState(false);
  const { messages, append } = useChat();

  useEffect(() => {
    if (typeof window !== "undefined") {
      const storedMessage = JSON.parse(sessionStorage.getItem("lastMessage"));
      setMessage(storedMessage);
    }
  }, []);

  useEffect(() => {
    if (message && messages.length === 0) {
      append({
        role: "user",
        content: `Summarise the details of ${message} in short. It will be used to generate an image.`
      });
    }
  }, [message, messages.length, append]);

  useEffect(() => {
    if (messages.length > 0) {
      setSummary(messages[messages.length - 1].content);
    }
  }, [messages]);


  return (
    <div className="flex flex-col w-[50%] min-h-screen py-24 mx-auto stretch">
      <div className="flex flex-col justify-center mb-2 items-center">
        <p className="font-bold"> The story generated by the AI model </p>
        <p className="bg-slate-700 p-3 m-2 rounded-lg text-white"> AI: {message} </p>
      </div>

      <div className="flex flex-col items-center">
        <button
          className="bg-blue-500 p-2 text-white rounded shadow-x1 disabled:bg-blue-500/20"
          disabled={!summary || imageIsLoading}
          onClick={async () => {
            setImageIsLoading(true);
            const response = await fetch("api/images", {
              method: "POST",
              headers: {
                "Content-TYpe": "application/json",
              },
              body: JSON.stringify({
                message: summary,
              }),
            });
            const data = await response.json();
            setImage(data);
            setImageIsLoading(false);
          }}
        >
          Generate Image
        </button>
      </div>

    {imageIsLoading &&(
      <div className="flex justify-center items-center mt-8">
        <div className="loader">
          <div className="animate-pulse flex space-x-4">
            <div className="rounded-full bg-slate-700 h-10 w-10"> </div>
          </div>
        </div>
      </div>
    )}

    {image && !imageIsLoading && (
      <div className="card w-full max-w-md py-24 mx-auto stretch">
        <img src={`data: image/jpeg; base64, ${image}`} />
      </div>
    )}

    </div>
  );
}

